import streamlit as st
import random
from PIL import Image

# -----------------------
# 기본 설정
# -----------------------
st.set_page_config(page_title="유리식의 연산 교과서", page_icon="📘", layout="centered")
ganadi_image = Image.open("IMG_0019.png")  # 사용자가 올린 가나디 이미지

st.title("📗 유리식과 유리함수의 성질 — 문제 교과서")
st.markdown("고1 공통수학 수준 | 유리식의 연산 · 성질 · 유리함수 개념 문제 15선")

# -----------------------
# 유리식 연산용 문제 자동 생성 함수
# -----------------------
def generate_rational_operation():
    a, b, c, d = random.randint(1, 9), random.randint(1, 9), random.randint(1, 9), random.randint(1, 9)
    op = random.choice(["+", "-", "*", "/"])
    # 항상 1~100의 정수로 떨어지는 답만 생성
    if op == "+":
        expr = f"({a}/{b}) + ({c}/{d})"
        ans = a*d + b*c
        den = b*d
    elif op == "-":
        expr = f"({a}/{b}) - ({c}/{d})"
        ans = a*d - b*c
        den = b*d
    elif op == "*":
        expr = f"({a}/{b}) × ({c}/{d})"
        ans = a * c
        den = b * d
    else:
        expr = f"({a}/{b}) ÷ ({c}/{d})"
        ans = a * d
        den = b * c
    
    if den != 0 and ans % den == 0 and 1 <= ans // den <= 100:
        correct = ans // den
        return expr, correct
    else:
        return generate_rational_operation()  # 다시 생성


# -----------------------
# 문제 데이터
# -----------------------

# (문제, 정답, 보기 리스트)
problems = [
    ("유리식이란 무엇인가요?", "두 다항식의 나눗셈 꼴", 
     ["두 다항식의 나눗셈 꼴", "항상 정수로만 이루어진 식", "분모가 없는 식", "항상 1차식", "무리식"]),
    
    ("유리식의 정의역에서 제외되는 값은?", "분모를 0으로 만드는 값", 
     ["x가 0인 값", "분자를 0으로 만드는 값", "분모를 0으로 만드는 값", "모든 실수", "자연수"]),
    
    ("유리식의 곱셈에서 분수의 계산과 같은 성질은?", "분자끼리, 분모끼리 곱한다", 
     ["분자끼리, 분모끼리 곱한다", "서로 교차로 곱한다", "더한 후 곱한다", "분모끼리만 곱한다", "분자끼리만 곱한다"]),
    
    ("유리식의 나눗셈에서 올바른 방법은?", "두 번째 분수를 뒤집고 곱한다", 
     ["두 번째 분수를 뒤집고 곱한다", "분모끼리 더한다", "분자끼리 나눈다", "항상 1로 나눈다", "분자만 뒤집는다"]),
    
    ("유리함수 f(x) = 1/x의 점근선은?", "x=0, y=0", 
     ["x=0, y=0", "x=1, y=1", "x=2, y=2", "x=-1, y=1", "점근선이 없다"]),
    
    ("유리함수의 그래프는 대체로 어떤 형태인가요?", "쌍곡선", 
     ["쌍곡선", "직선", "포물선", "원", "삼각형"]),
    
    ("유리식의 덧셈에서 공통분모를 구하는 이유는?", "분모를 같게 하여 더하기 위해", 
     ["분자를 없애기 위해", "분모를 같게 하여 더하기 위해", "항상 1로 만들기 위해", "나눗셈을 위해", "계산을 어렵게 하려고"]),
    
    ("유리함수의 수직점근선은 언제 생기나요?", "분모가 0이 되는 x에서", 
     ["분모가 0이 되는 x에서", "분자가 0이 되는 x에서", "항상 y=0에서", "x가 무한대로 갈 때", "점근선이 없다"]),
    
    ("유리함수의 수평점근선은?", "x가 커질 때 y가 가까워지는 직선", 
     ["x가 커질 때 y가 가까워지는 직선", "항상 y=0이다", "x축 그 자체", "그래프가 지나는 선", "항상 존재하지 않는다"]),
]

# 유리식 연산 문제 자동 6개 생성
for _ in range(6):
    expr, correct = generate_rational_operation()
    wrongs = random.sample(range(1, 101), 4)
    if correct not in wrongs:
        options = wrongs + [correct]
        random.shuffle(options)
        problems.append((f"다음을 계산하시오: {expr}", str(correct), [str(o) for o in options]))
    else:
        continue

# -----------------------
# 문제 출력
# -----------------------
score = 0
st.markdown("## 🧮 문제 풀이")

for i, (q, answer, options) in enumerate(problems, start=1):
    st.subheader(f"{i}. {q}")
    choice = st.radio(f"문제 {i}의 정답을 고르세요:", options, key=f"q{i}")

    if choice:
        if choice == answer:
            st.success("정답이야! 🎉")
            score += 1
        else:
            st.error("응 아니야 😅")
            st.image(ganadi_image, caption="가나디: 응 아니야!", use_column_width=False)

st.markdown("---")
st.write(f"### ✅ 총 {len(problems)}문제 중 {score}문제 정답!")

if score == len(problems):
    st.success("완벽해요! 유리식의 달인이군요 🌟")
elif score >= 10:
    st.info("좋아요! 조금만 더 연습해요 💪")
else:
    st.warning("복습이 필요해요! 다시 한 번 도전해봐요 📘")
